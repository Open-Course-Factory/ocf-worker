#!/bin/bash
set -e

# Paramètre optionnel pour spécifier le backend de storage
STORAGE_BACKEND=${1:-"filesystem"}

echo "🧪 Testing Storage API integration with backend: $STORAGE_BACKEND"

# Détection automatique de docker compose
DOCKER_COMPOSE_CMD="docker compose"
if ! docker compose version >/dev/null 2>&1; then
    if command -v docker-compose >/dev/null 2>&1; then
        DOCKER_COMPOSE_CMD="docker-compose"
    fi
fi

# Vérifier que les services sont en cours d'exécution
echo "🔍 Checking if services are running..."
if ! $DOCKER_COMPOSE_CMD ps | grep -q "ocf-worker.*Up"; then
    echo "❌ OCF Worker service is not running!"
    echo "💡 Please start with: make docker-dev"
    exit 1
fi

if ! $DOCKER_COMPOSE_CMD ps | grep -q "postgres-worker.*Up"; then
    echo "❌ PostgreSQL service is not running!"
    echo "💡 Please start with: make docker-dev"
    exit 1
fi

# Vérification spécifique pour Garage
if [ "$STORAGE_BACKEND" = "garage" ]; then
    if ! $DOCKER_COMPOSE_CMD --profile garage ps | grep -q "garage.*Up"; then
        echo "❌ Garage service is not running!"
        echo "💡 Please start with: make garage-start"
        exit 1
    fi
    
    # Vérifier la connectivité Garage
    if ! curl -s --connect-timeout 5 http://localhost:3900 >/dev/null 2>&1; then
        echo "❌ Garage S3 API not accessible!"
        echo "💡 Check Garage status with: make garage-status"
        exit 1
    fi
    
    echo "✅ Garage is running and accessible"
fi

echo "✅ Services are running"

# Configuration selon le backend
if [ "$STORAGE_BACKEND" = "garage" ]; then
    # Configuration Garage (cohérente avec le script)
    export STORAGE_TYPE=garage
    export GARAGE_ENDPOINT="http://localhost:3900"
    export GARAGE_ACCESS_KEY="GK31c2f218a2e44f485b94239e"
    export GARAGE_SECRET_KEY="4420d99ef7aa26b56b5130ad7913a6a5c77653a5e7a47a3b4c9b8b9c5f8b7b4d"
    export GARAGE_BUCKET="ocf-test"
    export GARAGE_REGION="garage"
    
    echo "🚀 Using Garage configuration:"
    echo "  Endpoint: $GARAGE_ENDPOINT"
    echo "  Bucket: $GARAGE_BUCKET"
    echo "  Region: $GARAGE_REGION"
    echo "  Access Key: ${GARAGE_ACCESS_KEY:0:10}..."
else
    # Configuration filesystem
    export STORAGE_TYPE=filesystem
    export STORAGE_PATH="./storage"
    
    echo "📁 Using filesystem configuration:"
    echo "  Storage path: $STORAGE_PATH"
fi

# Vérifier la configuration du storage côté serveur
echo "🔧 Checking server storage configuration..."
STORAGE_INFO=$(curl -s http://localhost:8081/api/v1/storage/info)
echo "$STORAGE_INFO" | jq .

# Attendre que le service soit prêt
echo "⏳ Waiting for OCF Worker to be ready..."
for i in {1..30}; do
    if curl -s http://localhost:8081/health >/dev/null 2>&1; then
        echo "✅ OCF Worker is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "❌ OCF Worker failed to start within 30 seconds"
        echo "📊 Service logs:"
        $DOCKER_COMPOSE_CMD logs --tail=20 ocf-worker
        exit 1
    fi
    sleep 1
done

# Créer les répertoires et fichiers de test
mkdir -p test-files

# Créer des fichiers de test adaptés au backend
cat > test-files/slides.md << 'MDEOF'
---
theme: default
title: Test Course - OCF Worker Storage
author: OCF Team
description: Generated by OCF Worker with backend storage
highlighter: shiki
lineNumbers: true
colorSchema: auto
---

# Test Course 🚀

Welcome to the OCF Worker test course!

**Storage Backend**: STORAGE_BACKEND_PLACEHOLDER

---

## Storage Integration

This course tests the OCF Worker storage capabilities:

- ✅ File upload and storage
- ✅ Multiple storage backends
- ✅ Content type detection
- ✅ API integration

**Current Backend**: STORAGE_BACKEND_PLACEHOLDER

---

## Backend Details

### Filesystem Storage
- Local file storage
- Direct file access
- Fast I/O operations

### Garage Storage  
- S3-compatible API
- Distributed architecture
- Scalable and resilient

---

## API Endpoints

```javascript
// Storage API endpoints
const endpoints = {
  upload: '/api/v1/storage/jobs/{job_id}/sources',
  list: '/api/v1/storage/jobs/{job_id}/sources',
  download: '/api/v1/storage/jobs/{job_id}/sources/{filename}',
  results: '/api/v1/storage/courses/{course_id}/results'
};
```

---

## Thank You! 

Storage backend testing complete ✅

🌐 **OCF Project**: [ocf-project.org](https://ocf-project.org)  
📧 **Email**: support@ocf-project.org
MDEOF

# Remplacer le placeholder par le vrai backend
sed -i "s/STORAGE_BACKEND_PLACEHOLDER/$STORAGE_BACKEND/g" test-files/slides.md

# Créer d'autres fichiers de test
cat > test-files/theme.css << 'CSSEOF'
/* OCF Worker Storage Test Theme */
:root {
  --ocf-primary: #667eea;
  --ocf-secondary: #764ba2;
  --ocf-accent: #ffd700;
  --storage-bg: linear-gradient(135deg, var(--ocf-primary) 0%, var(--ocf-secondary) 100%);
}

.slidev-layout {
    background: var(--storage-bg);
    color: white;
    font-family: 'Inter', system-ui, sans-serif;
}

.slidev-layout h1 {
    color: var(--ocf-accent);
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    font-weight: 800;
}

.storage-info {
    background: rgba(255,255,255,0.1);
    border-radius: 8px;
    padding: 1rem;
    margin: 1rem 0;
}
CSSEOF

cat > test-files/config.json << 'JSONEOF'
{
    "theme": "default",
    "title": "OCF Worker Storage Test",
    "author": "OCF Development Team",
    "description": "Integration test for OCF Worker storage backends",
    "highlighter": "shiki",
    "lineNumbers": true,
    "colorSchema": "auto",
    "storage_backend": "STORAGE_BACKEND_PLACEHOLDER",
    "test_timestamp": "TIMESTAMP_PLACEHOLDER"
}
JSONEOF

# Remplacer les placeholders
sed -i "s/STORAGE_BACKEND_PLACEHOLDER/$STORAGE_BACKEND/g" test-files/config.json
sed -i "s/TIMESTAMP_PLACEHOLDER/$(date -u +%Y-%m-%dT%H:%M:%SZ)/g" test-files/config.json

# Fonction pour nettoyer
cleanup() {
    echo "🧹 Cleaning up test files..."
    rm -rf test-files
}

trap cleanup EXIT

# Test health check
echo "📊 Testing health check..."
HEALTH_RESPONSE=$(curl -s http://localhost:8081/health)
echo "$HEALTH_RESPONSE" | jq .
if echo "$HEALTH_RESPONSE" | jq -e '.status == "healthy"' >/dev/null; then
    echo "✅ Health check passed"
else
    echo "❌ Health check failed"
    exit 1
fi

# Générer des IDs pour les tests
if command -v uuidgen >/dev/null 2>&1; then
    JOB_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
    COURSE_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
else
    JOB_ID="test-job-$(date +%s)"
    COURSE_ID="test-course-$(date +%s)"
fi

echo "🆔 Using Job ID: $JOB_ID"
echo "🆔 Using Course ID: $COURSE_ID"

# Test upload de fichiers sources
echo "📤 Testing multipart file upload..."
UPLOAD_RESPONSE=$(curl -s -X POST \
  -F "files=@test-files/slides.md" \
  -F "files=@test-files/theme.css" \
  -F "files=@test-files/config.json" \
  http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources)

echo "$UPLOAD_RESPONSE" | jq .

if echo "$UPLOAD_RESPONSE" | jq -e '.count == 3' >/dev/null; then
    echo "✅ File upload successful (3 files)"
else
    echo "❌ File upload failed"
    echo "Expected 3 files, got: $(echo "$UPLOAD_RESPONSE" | jq '.count // "unknown"')"
    exit 1
fi

# Test listing des fichiers sources
echo "📁 Testing source files listing..."
LIST_RESPONSE=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources)
echo "$LIST_RESPONSE" | jq .

FILE_COUNT=$(echo "$LIST_RESPONSE" | jq '.files | length')
if [ "$FILE_COUNT" -eq 3 ]; then
    echo "✅ File listing successful ($FILE_COUNT files found)"
else
    echo "❌ File listing failed (expected 3 files, got $FILE_COUNT)"
    exit 1
fi

# Test download de fichiers avec validation du contenu
echo "📥 Testing file downloads..."

# Test slides.md
echo "📄 Downloading slides.md..."
SLIDES_CONTENT=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources/slides.md)
if echo "$SLIDES_CONTENT" | grep -q "Storage Backend.*$STORAGE_BACKEND"; then
    echo "✅ slides.md download successful and contains correct backend info"
else
    echo "❌ slides.md download failed or doesn't contain backend info"
    exit 1
fi

# Test config.json
echo "⚙️ Downloading config.json..."
CONFIG_CONTENT=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources/config.json)
if echo "$CONFIG_CONTENT" | jq -e ".storage_backend == \"$STORAGE_BACKEND\"" >/dev/null 2>&1; then
    echo "✅ config.json download successful and backend matches"
else
    echo "❌ config.json download failed or backend mismatch"
    exit 1
fi

# Test création d'un job
echo "📋 Testing job creation..."
JOB_RESPONSE=$(curl -s -X POST http://localhost:8081/api/v1/generate \
  -H "Content-Type: application/json" \
  -d "{
    \"job_id\": \"$JOB_ID\",
    \"course_id\": \"$COURSE_ID\",
    \"source_path\": \"sources/$JOB_ID/\",
    \"callback_url\": \"http://localhost:8080/api/v1/generations/$JOB_ID/status\",
    \"metadata\": {
      \"storage_backend\": \"$STORAGE_BACKEND\",
      \"test_run\": true,
      \"test_timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
    }
  }")

echo "$JOB_RESPONSE" | jq .

if echo "$JOB_RESPONSE" | jq -e '.status == "pending"' >/dev/null; then
    echo "✅ Job creation successful"
else
    echo "❌ Job creation failed"
    exit 1
fi

# Test récupération du statut
echo "📈 Testing job status retrieval..."
STATUS_RESPONSE=$(curl -s http://localhost:8081/api/v1/jobs/$JOB_ID)
echo "$STATUS_RESPONSE" | jq .

if echo "$STATUS_RESPONSE" | jq -e '.id' >/dev/null; then
    echo "✅ Job status retrieval successful"
    
    # Vérifier les métadonnées
    if echo "$STATUS_RESPONSE" | jq -e ".metadata.storage_backend == \"$STORAGE_BACKEND\"" >/dev/null; then
        echo "✅ Metadata preserved correctly"
    else
        echo "⚠️ Metadata may not be preserved correctly"
    fi
else
    echo "❌ Job status retrieval failed"
    exit 1
fi

# Tests spécifiques au backend
echo "🔧 Testing backend-specific features..."

case $STORAGE_BACKEND in
    "filesystem")
        echo "📁 Testing filesystem storage..."
        # Vérifier dans le container
        if $DOCKER_COMPOSE_CMD exec ocf-worker ls -la /app/storage/sources/$JOB_ID/ 2>/dev/null; then
            echo "✅ Filesystem storage verification successful"
        else
            echo "⚠️ Could not verify filesystem storage (may be using different path)"
        fi
        ;;
    "garage")
        echo "🚀 Testing Garage S3 storage..."
        # Test spécifique Garage
        echo "🔍 Testing Garage bucket access..."
        
        # Vérifier que le bucket existe via l'API admin
        if $DOCKER_COMPOSE_CMD exec -T garage /garage bucket list 2>/dev/null | grep -q "ocf-test"; then
            echo "✅ Garage bucket 'ocf-test' exists"
        else
            echo "⚠️ Cannot verify Garage bucket existence"
        fi
        
        # Test de connectivité S3
        echo "🌐 Testing S3 API connectivity..."
        if curl -s --connect-timeout 5 "$GARAGE_ENDPOINT" >/dev/null 2>&1; then
            echo "✅ Garage S3 API is accessible"
        else
            echo "❌ Garage S3 API is not accessible"
        fi
        ;;
    *)
        echo "⚠️ Unknown storage backend: $STORAGE_BACKEND"
        ;;
esac

# Test de performance basique
echo "⚡ Testing basic performance..."
START_TIME=$(date +%s%N)

# Test d'un fichier plus grand
echo "Creating performance test file..."
dd if=/dev/zero of=test-files/perf-test.md bs=1024 count=10 2>/dev/null
echo "# Performance Test File" >> test-files/perf-test.md
echo "This is a test file for performance testing." >> test-files/perf-test.md

PERF_UPLOAD_RESPONSE=$(curl -s -X POST \
  -F "files=@test-files/perf-test.md" \
  http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources)

END_TIME=$(date +%s%N)
DURATION=$(( (END_TIME - START_TIME) / 1000000 ))

if echo "$PERF_UPLOAD_RESPONSE" | jq -e '.count == 1' >/dev/null 2>&1; then
    echo "✅ Performance test completed in ${DURATION}ms"
else
    echo "ℹ️ Performance test completed"
fi

rm -f test-files/perf-test.md

echo ""
echo "🎉 All storage API tests completed successfully!"
echo ""
echo "📊 Test Summary for backend: $STORAGE_BACKEND"
echo "  ✅ Health check"
echo "  ✅ Storage configuration"
echo "  ✅ File upload (3 files)"
echo "  ✅ File listing"
echo "  ✅ File downloads with content validation"
echo "  ✅ Job creation with metadata"
echo "  ✅ Job status retrieval"
echo "  ✅ Backend-specific features"
echo "  ✅ Performance testing"

case $STORAGE_BACKEND in
    "filesystem")
        echo ""
        echo "📁 Filesystem Storage Features:"
        echo "  - Local file system storage"
        echo "  - Direct file access in container"
        echo "  - Fast local I/O operations"
        ;;
    "garage")
        echo ""
        echo "🚀 Garage Storage Features:"
        echo "  - S3-compatible API"
        echo "  - Distributed storage"
        echo "  - Endpoint: $GARAGE_ENDPOINT"
        echo "  - Bucket: $GARAGE_BUCKET"
        echo "  - Region: $GARAGE_REGION"
        ;;
esac

echo ""
echo "🎯 Files tested:"
echo "  - slides.md (with backend-specific content)"
echo "  - theme.css (CSS styling)"
echo "  - config.json (with backend metadata)"
echo ""
echo "🗂️ Test metadata:"
echo "  📦 Job ID: $JOB_ID"
echo "  🎓 Course ID: $COURSE_ID"
echo "  🗄️ Storage Backend: $STORAGE_BACKEND"
echo "  📊 Files Processed: 3"
echo "  ⏱️ Performance Test: ${DURATION}ms"

echo ""
echo "✨ OCF Worker Storage API testing complete! ✨"