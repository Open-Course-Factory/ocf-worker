#!/bin/bash
set -e

echo "🧪 Testing Storage API integration with Docker Compose..."

# Vérifier que les services sont en cours d'exécution
echo "🔍 Checking if services are running..."
if ! docker-compose ps | grep -q "ocf-worker.*Up"; then
    echo "❌ OCF Worker service is not running!"
    echo "💡 Please start with: docker-compose up -d"
    exit 1
fi

if ! docker-compose ps | grep -q "postgres-worker.*Up"; then
    echo "❌ PostgreSQL service is not running!"
    echo "💡 Please start with: docker-compose up -d"
    exit 1
fi

echo "✅ Services are running"

# Attendre que le service soit prêt
echo "⏳ Waiting for OCF Worker to be ready..."
for i in {1..30}; do
    if curl -s http://localhost:8081/health >/dev/null 2>&1; then
        echo "✅ OCF Worker is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "❌ OCF Worker failed to start within 30 seconds"
        echo "📊 Service logs:"
        docker-compose logs --tail=20 ocf-worker
        exit 1
    fi
    sleep 1
done

# Créer les répertoires et fichiers de test
mkdir -p test-files

# Créer des fichiers de test
cat > test-files/slides.md << 'MDEOF'
# Test Course

## Slide 1
Hello, World!

## Slide 2
This is a test course.

---

## Slide 3
- Point 1
- Point 2
- Point 3

## Slide 4
```javascript
console.log("Hello from code!");
```
MDEOF

cat > test-files/theme.css << 'CSSEOF'
.slidev-layout {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.slidev-layout h1 {
    color: #ffd700;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
}

.slidev-layout h2 {
    border-bottom: 2px solid #ffd700;
    padding-bottom: 10px;
}
CSSEOF

cat > test-files/config.json << 'JSONEOF'
{
    "theme": "default",
    "title": "Test Course",
    "author": "OCF Worker Test",
    "description": "Generated by OCF Worker test suite",
    "highlighter": "prism",
    "lineNumbers": true,
    "monaco": true,
    "colorSchema": "dark"
}
JSONEOF

cat > test-files/logo.svg << 'SVGEOF'
<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
  <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" />
  <text x="50" y="55" text-anchor="middle" fill="white" font-size="16">OCF</text>
</svg>
SVGEOF

# Fonction pour nettoyer
cleanup() {
    echo "🧹 Cleaning up test files..."
    rm -rf test-files
}

trap cleanup EXIT

# Test health check
echo "📊 Testing health check..."
HEALTH_RESPONSE=$(curl -s http://localhost:8081/health)
echo "$HEALTH_RESPONSE" | jq .
if echo "$HEALTH_RESPONSE" | jq -e '.status == "healthy"' >/dev/null; then
    echo "✅ Health check passed"
else
    echo "❌ Health check failed"
    exit 1
fi

# Test storage info
echo "📋 Testing storage info..."
STORAGE_INFO=$(curl -s http://localhost:8081/api/v1/storage/info)
echo "$STORAGE_INFO" | jq .
echo "✅ Storage info retrieved"

# Générer des IDs pour les tests
if command -v uuidgen >/dev/null 2>&1; then
    JOB_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
    COURSE_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
else
    # Fallback si uuidgen n'est pas disponible
    JOB_ID="test-job-$(date +%s)"
    COURSE_ID="test-course-$(date +%s)"
fi

echo "🆔 Using Job ID: $JOB_ID"
echo "🆔 Using Course ID: $COURSE_ID"

# Test upload de fichiers sources
echo "📤 Testing multipart file upload..."
UPLOAD_RESPONSE=$(curl -s -X POST \
  -F "files=@test-files/slides.md" \
  -F "files=@test-files/theme.css" \
  -F "files=@test-files/config.json" \
  -F "files=@test-files/logo.svg" \
  http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources)

echo "$UPLOAD_RESPONSE" | jq .

if echo "$UPLOAD_RESPONSE" | jq -e '.count == 4' >/dev/null; then
    echo "✅ File upload successful (4 files)"
else
    echo "❌ File upload failed"
    exit 1
fi

# Test listing des fichiers sources
echo "📁 Testing source files listing..."
LIST_RESPONSE=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources)
echo "$LIST_RESPONSE" | jq .

FILE_COUNT=$(echo "$LIST_RESPONSE" | jq '.files | length')
if [ "$FILE_COUNT" -eq 4 ]; then
    echo "✅ File listing successful ($FILE_COUNT files found)"
else
    echo "❌ File listing failed (expected 4 files, got $FILE_COUNT)"
    exit 1
fi

# Test download de chaque fichier source
echo "📥 Testing source file downloads..."

echo "📄 Downloading slides.md:"
SLIDES_CONTENT=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources/slides.md)
if echo "$SLIDES_CONTENT" | grep -q "# Test Course"; then
    echo "✅ slides.md download successful"
else
    echo "❌ slides.md download failed"
    echo "Content: $SLIDES_CONTENT"
    exit 1
fi

echo "🎨 Downloading theme.css:"
THEME_CONTENT=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources/theme.css)
if echo "$THEME_CONTENT" | grep -q "slidev-layout"; then
    echo "✅ theme.css download successful"
else
    echo "❌ theme.css download failed"
    exit 1
fi

echo "⚙️ Downloading config.json:"
CONFIG_CONTENT=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources/config.json)
if echo "$CONFIG_CONTENT" | jq -e '.title == "Test Course"' >/dev/null 2>&1; then
    echo "✅ config.json download successful"
else
    echo "❌ config.json download failed"
    exit 1
fi

echo "🖼️ Downloading logo.svg:"
LOGO_CONTENT=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources/logo.svg)
if echo "$LOGO_CONTENT" | grep -q "<svg"; then
    echo "✅ logo.svg download successful"
else
    echo "❌ logo.svg download failed"
    exit 1
fi

# Test création d'un job via API
echo "📋 Testing job creation..."
JOB_RESPONSE=$(curl -s -X POST http://localhost:8081/api/v1/generate \
  -H "Content-Type: application/json" \
  -d "{
    \"job_id\": \"$JOB_ID\",
    \"course_id\": \"$COURSE_ID\",
    \"source_path\": \"sources/$JOB_ID/\",
    \"callback_url\": \"http://localhost:8080/api/v1/generations/$JOB_ID/status\"
  }")

echo "$JOB_RESPONSE" | jq .

if echo "$JOB_RESPONSE" | jq -e '.status == "pending"' >/dev/null; then
    echo "✅ Job creation successful"
else
    echo "❌ Job creation failed"
    exit 1
fi

# Test récupération du statut du job
echo "📈 Testing job status retrieval..."
STATUS_RESPONSE=$(curl -s http://localhost:8081/api/v1/jobs/$JOB_ID)
echo "$STATUS_RESPONSE" | jq .

if echo "$STATUS_RESPONSE" | jq -e '.id' >/dev/null; then
    echo "✅ Job status retrieval successful"
else
    echo "❌ Job status retrieval failed"
    exit 1
fi

# Test listing de tous les jobs
echo "📊 Testing jobs listing..."
JOBS_RESPONSE=$(curl -s http://localhost:8081/api/v1/jobs)
echo "$JOBS_RESPONSE" | jq '.jobs | length'
echo "✅ Jobs listing successful"

# Test des erreurs - fichier inexistant
echo "🚫 Testing error handling..."
ERROR_RESPONSE=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources/nonexistent.txt)
if echo "$ERROR_RESPONSE" | grep -q "error"; then
    echo "✅ Error handling working correctly"
else
    echo "❌ Error handling failed"
fi

# Test upload avec type de fichier non autorisé
echo "🚫 Testing file type validation..."
echo "malicious content" > test-files/malicious.exe
UPLOAD_ERROR=$(curl -s -X POST \
  -F "files=@test-files/malicious.exe" \
  http://localhost:8081/api/v1/storage/jobs/$JOB_ID/sources)

if echo "$UPLOAD_ERROR" | grep -q "file type not allowed"; then
    echo "✅ File type validation working"
else
    echo "❌ File type validation failed"
    echo "Response: $UPLOAD_ERROR"
fi

rm -f test-files/malicious.exe

# Vérification dans le container
echo "🐳 Checking files in Docker container..."
docker-compose exec ocf-worker ls -la /app/storage/sources/$JOB_ID/ || echo "Storage directory structure may be different"

# Test des logs (même s'ils sont vides pour l'instant)
echo "📝 Testing logs retrieval..."
LOGS_RESPONSE=$(curl -s http://localhost:8081/api/v1/storage/jobs/$JOB_ID/logs)
# Les logs n'existent probablement pas encore, c'est normal
echo "📝 Logs response (may be empty): $LOGS_RESPONSE"

echo ""
echo "🎉 All storage API tests completed successfully!"
echo ""
echo "📊 Test Summary:"
echo "  ✅ Health check"
echo "  ✅ Storage info"
echo "  ✅ Multipart file upload (4 files)"
echo "  ✅ File listing"
echo "  ✅ File downloads (all types)"
echo "  ✅ Job creation and status"
echo "  ✅ Error handling"
echo "  ✅ File type validation"
echo ""
echo "🗂️ Files uploaded:"
echo "  - slides.md (Markdown content)"
echo "  - theme.css (CSS styling)"
echo "  - config.json (JSON configuration)"
echo "  - logo.svg (SVG image)"
echo ""
echo "🎯 Next steps:"
echo "  1. Implement Garage S3 storage backend"
echo "  2. Add actual Slidev generation worker"
echo "  3. Test result file generation and download"
echo "  4. Add real-time log streaming"
